/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ex05;

import java.awt.Font;
import javax.swing.ButtonGroup;

/**
 *
 * @author ferna
 */
public class FormSelecao extends javax.swing.JFrame {

    private int estilo;
    
    
    /**
     * Creates new form FormSelecao
     */
    public FormSelecao() {
        initComponents();
        configurarFormulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ckbNegrito = new java.awt.Checkbox();
        ckbItalico = new java.awt.Checkbox();
        rdbArial = new javax.swing.JRadioButton();
        rdbTahoma = new javax.swing.JRadioButton();
        rdbTimes = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTextoExemplo = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("estilo");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel2.setText("fonte");

        ckbNegrito.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ckbNegrito.setLabel("Negrito");
        ckbNegrito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ckbNegritoKeyPressed(evt);
            }
        });

        ckbItalico.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ckbItalico.setLabel("Italico");

        rdbArial.setText("Arial");
        rdbArial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbArialActionPerformed(evt);
            }
        });

        rdbTahoma.setText("Tahoma");
        rdbTahoma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbTahomaActionPerformed(evt);
            }
        });

        rdbTimes.setText("Times");
        rdbTimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbTimesActionPerformed(evt);
            }
        });

        txtTextoExemplo.setColumns(20);
        txtTextoExemplo.setLineWrap(true);
        txtTextoExemplo.setRows(5);
        txtTextoExemplo.setText("Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop.");
        jScrollPane1.setViewportView(txtTextoExemplo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ckbNegrito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(ckbItalico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdbArial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdbTahoma)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdbTimes)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckbNegrito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ckbItalico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbArial)
                    .addComponent(rdbTahoma)
                    .addComponent(rdbTimes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdbArialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbArialActionPerformed
        trocarFonte();
    }//GEN-LAST:event_rdbArialActionPerformed

    private void rdbTahomaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbTahomaActionPerformed
        trocarFonte();
    }//GEN-LAST:event_rdbTahomaActionPerformed

    private void rdbTimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbTimesActionPerformed
        trocarFonte();
    }//GEN-LAST:event_rdbTimesActionPerformed

    private void ckbNegritoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ckbNegritoKeyPressed
        trocarEstilo();
    }//GEN-LAST:event_ckbNegritoKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormSelecao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormSelecao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormSelecao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormSelecao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormSelecao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox ckbItalico;
    private java.awt.Checkbox ckbNegrito;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rdbArial;
    private javax.swing.JRadioButton rdbTahoma;
    private javax.swing.JRadioButton rdbTimes;
    private javax.swing.JTextArea txtTextoExemplo;
    // End of variables declaration//GEN-END:variables

    private void configurarFormulario()
    {
        this.setTitle("Fontes e estilos");
        this.setResizable(true);
        this.setLocationRelativeTo(null);
        
        
        //definir a seleção do radioButton como 
        //mutuamente exclusiva
        ButtonGroup bg = new ButtonGroup();
        bg.add(rdbArial);
        bg.add(rdbTahoma);
        bg.add(rdbTimes);
        
        //iniciar com rdbArial selecionado
        rdbArial.setSelected(true);
        
        estilo = Font.PLAIN;
        
        trocarFonte();
        
    }
    
    private void trocarFonte()
    {
        String fonte ="";
        if(rdbArial.isSelected())
        {
            fonte = "Arial";
        }
        else if(rdbTahoma.isSelected())
        {
            fonte = "Tahoma";
        }
        else if(rdbTimes.isSelected())
        {
            fonte = "Times New Roman";
        }
        
        txtTextoExemplo.setFont(new Font(fonte,estilo,14));
        
    }
    
    private void trocarEstilo()
    {
        /*if(ckbNegrito.isSelected()&& !ckbItalico.isSelected())
        {
            estilo = Font.BOLD+Font.ITALIC;
        }
        else if(!ckbNegrito.isSelected()&& !ckbItalico.isSelected())
        {
            estilo = Font.BOLD
        }*/
    }

}
